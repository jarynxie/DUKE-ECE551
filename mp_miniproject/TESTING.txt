
This is the test cases for my command shell

Usage: As specified in commandShell.txt, type "./ffosh."  to run the shell

There are xxx test cases in total: (step1) + (step2)


----------------- Test cases for step1 ----------------
(1-1)
jx95@ece551:~/ece551/mp_miniproject$ ./ffosh. run
Usage: ./ffosh.

This is correct because argc must be 1 to start the shell

(1-1)
- Run: $/bin/ls
- Output:
'#TESTING.txt#'   TESTING.txt~	     ffosh.cpp	    test_input.txt
 Makefile	  cmd.h		     numerics.txt   testcases
 README		  commandShell.txt   shell.h
 TESTING.txt	  ffosh.	     test.sh
Program was successful
- Reason:
This is correct because I typed the full path of "ls" and it successfully listed the files in the current directory.
My prompt also correctly shows that the the program was successful.

(1-2)
- Run: exit
- Output: no output, my shell exists
- Reason:
This is correct because when type "exit", the shell should exit.

(1-3)
- Run: (type EOF: ctrl + D)
- Output: no output, my shell exists
- Reason:
This is correct because when encountered EOF, the shell should exit.

(1-4)
- Run:
ffosh:/home/jx95/ece551/mp_miniproject $cd testcases
ffosh:/home/jx95/ece551/mp_miniproject/testcases $./code
- Output:
42
Hello World
45
42
Program was successful
- Reason:    
This is correct because I copied this file from earlier assignment and the output is as expected.
My prompt also correctly shows new current directory before the $, which is the requirement in Step3.

(1-5)
- Run: ./segfault
- Output:
Terminated by signal 11
- Reason:
This is correct because I wrote a file which has segfault in it, and my shell correctly shows its signal number(11).

(1-6)
- Run: ./testcases/exit_failure
- Output:
Program failed with code 1
- Reason:
  This is correct because this program only return EXIT_FAILURE (exit code 1).

----------------- Test cases for step2 ----------------
(2-1) initialize ECE551PATH
- Run: env
- Output:
(not include all the variables)
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
ECE551PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
Program was successful
- Reason:
This is correct because "ECE551PATH" is correctly initialized by "PATH".

(2-2) ls
- Run: ls
- Output:
Makefile     TESTING.txt~      ffosh.	     shell.h	     testcases
README	     cmd.h	       ffosh.cpp     test.sh
TESTING.txt  commandShell.txt  numerics.txt  test_input.txt
Program was successful
- Reason:
This is correct because it searches the ECE551PATH and correctly execute /bin/ls

(2-3) status
- Run: status
- Output:
No gradings in progress
===========================================
Assignments that are due in the near future
 (but you have not yet passed)
============================================
mp_miniproject Due: Sun Dec  8 18:59:59 2019
 **HARD DEADLINE**
   -> requires 1
Program was successful
- Reason:
This is correct because it searches the ECE551PATH and correctly execute /usr/local/bin/status

(2-4) absolute path
- Run: /bin/pwd
- Output:
/home/jx95/ece551/mp_miniproject
Program was successful
- Reason:
This is correct because the path name has a "/" in it and it should only look at the specified command

(2-5) relative path
- Run: ./segfault
- Output:
Terminated by signal 11
- Reason:
This is corrct because it recognizes it as a relative path and execute the specified program

(2-6)
- Run: happy
- Output:
Command happy not found
- Reason:
This is correct because there is no command named "happy"

(2-7)
- Run: /bin/status
- Output:
execve: No such file or directory
Program failed with code 1
- Reason:
This is correct because the path name has a "/" in it so it should only search the specified directory and "status" is not in this directory.

(2-8) change ECE551PATH
- Run: status
       set ECE551PATH /usr/games:/usr/local/games
       status
- Output:  
ffosh:/home/jx95/ece551/mp_miniproject $status
No gradings in progress
===========================================
Assignments that are due in the near future
 (but you have not yet passed)
============================================
mp_miniproject Due: Sun Dec  8 18:59:59 2019
 **HARD DEADLINE**
   -> requires 1
Program was successful

Trying to change ECE551PATH, automically export it.
Run myenv to check if ECE551PATH was changed.

Command status not found
- Reason:
This is correct because I changed the value of ECE551PATH, resulting in "status" command not found after the change.
And if you try to run "myenv", you can see that the value of it has been changed.

(2-9)
- Run: ls -l
- Output:
total 376
-rw-rw-r-- 1 jx95 jx95   4724 Dec  5 01:04 '#TESTING.txt#'
-rw-rw-r-- 1 jx95 jx95    164 Dec  4 10:48  Makefile
-rw-rw-r-- 1 jx95 jx95   2499 Nov 15 10:50  README
-rw-rw-r-- 1 jx95 jx95   3660 Dec  4 01:47  TESTING.txt
-rw-rw-r-- 1 jx95 jx95   4927 Dec  3 18:15  cmd.h
-rw-rw-r-- 1 jx95 jx95   7907 Nov 15 10:50  commandShell.txt
-rwxrwxr-x 1 jx95 jx95 314112 Dec  4 11:53  ffosh.
-rw-rw-r-- 1 jx95 jx95   2583 Dec  4 11:52  ffosh.cpp
-rw-rw-r-- 1 jx95 jx95  12413 Nov 15 10:50  numerics.txt
-rw-rw-r-- 1 jx95 jx95   2634 Dec  4 11:53  shell.h
-rwxrwxrwx 1 jx95 jx95     80 Dec  3 14:44  test.sh
-rw-rw-r-- 1 jx95 jx95      5 Dec  3 14:44  test_input.txt
drwxrwxr-x 2 jx95 jx95     54 Dec  4 00:30  testcases
Program was successful
- Reason:
This is correct because it shows that command can now take arguments.

(2-10)
- Run: ls             -l
- Output: same as before
- Reason: same as before

(2-10)
- Run: echo a b 23
- Output:
a b 23
Program was successful
- Reason:
This is correct because it shows that argument of "echo" are correctly passed.

(2-12)
- Run: echo \\
- Output:
\
Program was successful
- Reason:
This is correct because it supports escaped backslashes (\\)


(2-13)
- Run: echo \"
- Output:
"
Program was successful
- Reason:
This is correct because it supports escaped quotation marks (\")
(2-11)
- Run: echo          a               b     23
- Output:
a b 23
Program was successful
- Reason
This is correct because it successfully skips the whitespaces between arguments.

(2-12)
- Run: echo "a   b"  c        "def    ghi"
- Output:
a   b c def    ghi
Program was successful
- Reason:
This is correct because it supports literal whitespaces when using "

(2-13)
- Run: echo "\"hello world\""    "a\\b\\c d\\"
- Output:
"hello world" a\b\c d\
Program was successful
- Reason:
This is correct because it supports escaped quotation marks and backslashed

(2-14)
- Run: echo a\\\b
- Output:
a\b
Program was successful
- Reason:
This is just another example to show that escaping is well supported.

(2-15)
- Run: echo this\ is\ a\ test
- Output:
this is a test
Program was successful
- Reason:
This is correct because backslash followed by a space should by replaced with a space.

(2-15)
- Run: echo "aaaa b
- Output:
Unclosed quotation!
Program was successful
- Reason:
This is correct because it reports error when encountered unclosed quotation mark.

(2-16)
- Run: pwd
       set PATH 123
       export PATH
       pwd
- Output:
/home/jx95/ece551/mp_miniproject
Program was successful

/home/jx95/ece551/mp_miniproject
Program was successful
- Reason:
This is correct because it shows that changing PATH cannot affect the search range, only ECE551PATH can affect it.
As a result, "pwd" can also be found in the path specified by ECE551PATH

----------------- Test cases for step3 ----------------
Note1: As stated on Piazza, I can choose if to automically export the variable that's already been exported before.
Here, I choose that the user must EXPORT IT AGAIN after changing the variable's value,
However, if the user want to chnge "ECE551PATH", it will be automically exported. In order to check if the change is
successful, you can run "myenv" after the change to see if it works (because now the search range has changed, "env"
may not be found in ECE551PATH).
Note2: Also as posted on Piazza, the value of a variable is literal, so everything after "var " is the value of this variable.
Note3: As for variable replacement, I search the longest possible variable name greedly. Besides, if variable abc = 123,
ece$abcece should be replaced with ece123ece.
-------------------------------------------------------
(3-1)
- Run & Output:
ffosh:/home/jx95/ece551/mp_miniproject $cd ./testcases
ffosh:/home/jx95/ece551/mp_miniproject/testcases $ls
code  segfault	segfault.cpp
Program was successful
ffosh:/home/jx95/ece551/mp_miniproject/testcases $cd ..
ffosh:/home/jx95/ece551/mp_miniproject $cd /home/jx95/ece551/mp_miniproject/testcases
ffosh:/home/jx95/ece551/mp_miniproject/testcases $ls
code  segfault	segfault.cpp
Program was successful
ffosh:/home/jx95/ece551/mp_miniproject/testcases $
- Reason:
This is correct because it shows the changes of current directory in the prompt.
It perfectly supports relative and absolute paths. 

(3-2)
- Run:
cd notexist
- Output:
Failed to change directory
- Reason:
This is correct because "notexist" doesn't exist, so we cannot change the current directory to it.

(3-3)
- Run: env
- Output:
(There are too many so I don't show them here, you can test it by typing "env")
- Reason:
This is correct because it shows all the variables.

(3-3)
- Run: echo $HOME
- Output:
/home/jx95
Program was successful
- Reason:
This is correct because it replaces $varname with its value in the argument

(3-4)
- Run: echo $LOGNAME=jx95testtest
- Output:
jx95=jx95testtest
Program was successful
- Reason: 
This is correct because it supports variable expansion.

(3-5)
- Run: echo $VISUAL$SHELL
- Output:
emacs -nw/bin/bash
Program was successful
- Reason:
This is another variable expansion example.

(3-6)
- Run: echo $nosuchvar
- Output:
$nosuchvar
Program was successful
- Reason:
This is correct because there is no variable named "nosuchvar", so it just print the string out.

(3-7)
- Run: $PATH
- Output:
Command /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games not found
- Reason:
This is correct because the program name is now replaced with the variable's value and it cannot be found.

(3-8)
- Run: set xjy 12345
       env
       echo $xjy
- Output:
(There are too many variables, so I don't include them here.)
12345
Program was successful
- Reason:
There is no such variable that named "xjy" when running "env".
But I when typing "$xjy", my shell replaces it with its value.

(3-9)
- Run: set
- Output:
Usage: set var value
- Reason:
This is correct because the test case didn't follow the correct usage.

(3-10)
- Run: set 12!cww 32412
- Output:
Invalid variable name!
- Reason:
This is correct because the variable name is invalid, it must be a combination of letters, underscores and numbers.

(3-11)
- Run: set xjy 123
       env
       export xjy
       env
- Output:       
(output didn't inclue here, no variable named "xjy")
(too many lines, not include all of them)
xjy=123
- Reason:
This is correct because variable can only be put in the environment after calling "export".

(3-12)
- Run: set xjy 11 22 33 aa
       echo $xjy
- Output:       
11 22 33 aa
Program was successful
- Reason:
This is correct because I choose to evaluate a variable with eveything after "var ", including spaces

(3-3)
- Run: set test abc
       set try 123
       echo $test$try
- Output:
abc123
Program was successful
- Reason:
This is the case stated in README and it's correct because here two variable names were changed to their values.

(3-13)
- Run: set cdvar ..
       cd $cdvar
- Output:
(Open a new prompt, with the prior directory)
- Reason:
This is correct because it replaces "cdvar" with its value and change the current directory accordingly.

(3-14)
- Run: export
- Output:
Usage: export var
- Reason:
This is correct because the test case didn't use the valid usage to export variable, variable name must be included.

(3-15)
- Run: export notexist
- Output:
Variable not found!
- Reason:
This is correct because the variable doesn't exist, so I cannot export it.

(3-16)
- Run: echo $xjy
       rev xjy
       echo $xjy
- Output:       
11223344
Program was successful
44332211
Program was successful
- Reason:
This is correct because the value of the specified variable is successfully reversed.

(3-17)
- Run: rev notexist
- Output:
Variable not found!
- Reason:
This is correct because the variable doesn't exist, so it cannot be reversed.

(3-18)
- Run: status
       set ECE551PATH /usr/games:/usr/local/games
       status
- Output:
ffosh:/home/jx95/ece551/mp_miniproject $status
No gradings in progress
===========================================
Assignments that are due in the near future
 (but you have not yet passed)
============================================
mp_miniproject Due: Sun Dec  8 18:59:59 2019
 **HARD DEADLINE**
   -> requires 1
Program was successful

Trying to change ECE551PATH, automically export it.
Run myenv to check if ECE551PATH was changed.

Command status not found
- Reason:
This is correct because I changed the value of ECE551PATH, resulting in "status" command not found after the change.
And if you try to run "myenv", you can see that the value of it has been changed.

----------------- Test cases for step4 ----------------
Note: Only support single redirection
-------------------------------------------------------
(4-1)
- Run: echo test stdout redirection > ./testcases/redir_output.txt
       cd testcases
       ls
       cat redir_output.txt
- Output:
Program was successful

code  redir_output.txt	segfault  segfault.cpp
Program was successful

test stdout redirection
Program was successful
- Reason:
This is correct because it redirects standard input for the command.

(4-2)
- Run: ./sortLines < sortlines_input.txt
- Output:
aaa
bb
c
eeeeee
ff
Program was successful
- Reason:
This is correct. Here I use redirection to give input to the program from 079_sort_cpp, you can see that the lines are
sorted and printed correctly.

(4-3)
- Run: ls -l > ./testcases/ls_output.txt
      cat ./testcases/ls_output.txt
- Output:
Program was successful

total 408
-rw-rw-r-- 1 jx95 jx95  10519 Dec  7 17:17 cmd.h
-rw-rw-r-- 1 jx95 jx95   7907 Nov 15 10:50 commandShell.txt
-rwxrwxr-x 1 jx95 jx95 338712 Dec  7 17:17 ffosh.
-rw-rw-r-- 1 jx95 jx95   4150 Dec  6 22:09 ffosh.cpp
-rw-rw-r-- 1 jx95 jx95    164 Dec  4 10:48 Makefile
-rw-rw-r-- 1 jx95 jx95  12413 Nov 15 10:50 numerics.txt
-r--r----- 1 jx95 jx95      0 Dec  6 17:16 output.txt
-rw-rw-r-- 1 jx95 jx95   2499 Nov 15 10:50 README
-rw-rw-r-- 1 jx95 jx95   6096 Dec  6 22:08 shell.h
drwxrwxr-x 2 jx95 jx95    212 Dec  7 17:36 testcases
-rw-rw-r-- 1 jx95 jx95  14158 Dec  7 17:35 TESTING.txt
Program was successful

- Reason:
This is correct and it is another stdout redirection.

(4-4)
- Run: /bin/happy 2> ./testcases/stderr_output.txt
       cd testcases
       cat stderr_output.txt
- Output:
execve: No such file or directory
Program was successful
- Reason:
This is correct because it redirects standard error correctly.
